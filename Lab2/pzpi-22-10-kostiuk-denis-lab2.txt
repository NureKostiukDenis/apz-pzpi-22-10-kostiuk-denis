Харківський національний університет радіоелектроніки

Кафедра програмної інженерії






Звіт
З Лабораторної роботи № 2
з дисципліни «Архітектура програмного забезпечення» 





Виконав:                
ст. гр. ПЗПІ 22-10  Костюк Д.В.

Перевірив: 
асистент каф. ПІ Дашенков  Д. С.







Харків 2025


     
     Посилання на гіт: https://github.com/NureKostiukDenis/apz-pzpi-22-10-kostiuk-denis/tree/main/Lab2/pzpi-22-10-kostiuk-denis-lab2-code
     
1. Мета роботи 
     Метою мобільного Android додатку "Anware" є надання користувачам зручного інструменту для взаємодії з системою контролю складських приміщень. Ключові можливості додатку в рамках початкового випуску включають:
• Візуалізація складу: Надання користувачам можливості бачити карту складу та визначати, в яких саме секціях знаходяться товари.
• Пошук товарів: Забезпечення швидкого пошуку необхідних товарів за їх назвами або унікальними ідентифікаторами
     
2. Інженерні рішення 
     1.1. Сучасна архітектура додатку та UI:  Використано Android Jetpack компоненти для побудови надійного та масштабованого додатку. Core KTX надає Kotlin розширення для більш лаконічного коду. AppCompat забезпечує сумісність з попередніми версіями Android. Material Components використовуються для реалізації сучасного дизайну згідно з гайдлайнами Material Design. ConstraintLayout дозволяє створювати складні та адаптивні UI макети.
     1.2. Управління життєвим циклом та станом: Для ефективного управління даними, пов'язаними з UI, та їх збереження при змінах конфігурації (наприклад, повороті екрану) застосовуються ViewModel та LiveData. Це дозволяє створювати UI, що реагує на зміни даних та є свідомим щодо життєвого циклу компонентів.
     1.3. Навігація в додатку: * Реалізовано навігацію між екранами (фрагментами) за допомогою Navigation Component. Це спрощує управління переходами, передачу даних між екранами та обробку "Up" та "Back" навігації. Fragment KTX надає зручні розширення для роботи з фрагментами.
     1.4. Взаємодія з REST API: Для комунікації з бекендом через REST API використовується бібліотека Retrofit. Вона дозволяє декларативно описувати API інтерфейси. Для конвертації JSON-відповідей та запитів у Kotlin/Java об'єкти використовується Gson Converter, а для роботи з простими типами даних (рядки, числа) - Scalars Converter.
     1.5. Впровадження залежностей (Dependency Injection): Для управління залежностями в додатку застосовується Koin. Це полегшує тестування, управління екземплярами об'єктів та зменшує зв'язаність коду, роблячи його більш модульним та підтримуваним.
     1.6. Покращення користувацького досвіду: Для відображення екрану завантаження при запуску додатку інтегровано Splash Screen API. Для реалізації функціоналу "потягніть для оновлення" (swipe-to-refresh) використовується SwipeRefreshLayout. Annotations використовуються для покращення аналізу коду та виявлення потенційних проблем на етапі розробки.
     
     
     
     
     
3. Діаграма прецедентів

Рисунок 1 – Діаграма прецедентів




4. Діаграма компонентів 


Рисунок 2 – Діаграма компонентів







5. Діаграма діяльності 

Рисунок 3 – Діаграма діяльності 









6. Діаграма пакетів

Рисунок 4– Діаграма пакетів
